{"version":3,"sources":["actions/books.ts","types/types.ts","actions/filter.ts","components/Filter/Filter.tsx","containers/Filter.ts","actions/cart.ts","actions/promocodeAction.ts","components/CartModule/CartInner/CartInner.tsx","containers/cartInner.ts","components/CartModule/CartModule.tsx","containers/CartModule.ts","components/ShoppingList/ShoppingList.tsx","containers/ShoppingList.ts","containers/ShopMenu.tsx","components/ShopMenu/ShopMenu.tsx","components/BookCard/BookCard.tsx","containers/BookCard.ts","containers/Main.ts","components/Main/Main.tsx","components/App/App.tsx","containers/App.ts","reducers/books.ts","reducers/cart.ts","reducers/filter.ts","reducers/rootReducer.ts","index.tsx","store.ts"],"names":["setBooks","books","type","payload","getBookThunk","dispatch","axios","get","then","data","setFilter","filter","setSearchQuery","value","Filter","filterBy","searchQuery","Menu","secondary","Item","active","onClick","Input","icon","onChange","e","target","placeholder","connect","bindActionCreators","filterActions","addToCart","obj","removeFromCart","id","isCartOpened","addToShoppingList","promoCode","promoCodeValue","checkPromoCode","CartInner","item","booksCount","booksInCartIds","reduce","init","current","Modal","Content","image","Image","wrapped","size","src","Description","Header","title","author","className","price","Icon","name","cart","cartActions","CartModule","CartItems","totalPrice","isbuttonDisabled","count","trigger","Button","map","key","disabled","booksInCart","uniqBy","total","book","CheckPromoCode","promocodeActions","shoppingLisOuter","index","console","log","Math","random","itemInner","shoppingListInner","shoppingList","length","position","BookCard","addedCount","Card","Meta","extra","searchBooks","orderBy","sortBy","toLowerCase","indexOf","filterBooks","isReady","Group","itemsPerRow","App","useEffect","Container","booksActions","initialState","rootReducer","combineReducers","state","action","produce","draft","push","splice","findIndex","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e11caca2.chunk.js","sourcesContent":["import {booksType} from \"../types/booksType\";\r\nimport {ActionsType, SET_BOOKS} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\n\r\nexport const setBooks = (books: booksType[]):ActionsType => ({\r\n    type: SET_BOOKS,\r\n    payload: books\r\n})\r\n\r\nexport type setBooksActionType = {setBooks: typeof setBooks }\r\n\r\nexport const getBookThunk = () => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    axios.get('./books.json').then(\r\n        ({data}) => dispatch(setBooks(data))\r\n    );\r\n}","import {booksType} from \"./booksType\";\r\n\r\nexport const SET_BOOKS = 'SET_BOOKS'\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART'\r\nexport const ADD_TO_CART = 'ADD_TO_CART'\r\nexport const TOGGLE_THE_CART = 'TOGGLE_THE_CART'\r\nexport const SET_FILTER = 'SET_FILTER'\r\nexport const ADD_TO_SHOPPING_LIST = 'ADD_TO_SHOPPING_LIST'\r\nexport const SET_QUERY = 'SET_QUERY'\r\nexport const CHECK_PROMO_CODE = 'CHECK_PROMO_CODE'\r\nexport const ADD_PROMO_CODE = 'ADD_PROMO_CODE'\r\n\r\ntype booksActionType = {\r\n    type: typeof SET_BOOKS;\r\n    payload: booksType[]\r\n}\r\n\r\ntype removeFromCartActionType = {\r\n    type: typeof REMOVE_FROM_CART\r\n    payload: number\r\n}\r\n\r\ntype addToCartActionType = {\r\n    type: typeof ADD_TO_CART\r\n    payload: booksType\r\n}\r\n\r\ntype toggleTheCartActionType = {\r\n    type: typeof TOGGLE_THE_CART\r\n}\r\n\r\ntype addToShoppingListActionType = {\r\n    type: typeof ADD_TO_SHOPPING_LIST\r\n}\r\n\r\ntype  setFilterActionType = {\r\n    type: typeof SET_FILTER\r\n    payload: string\r\n}\r\n\r\ntype setSearchQueryActionType = {\r\n    type: typeof SET_QUERY\r\n    payload: string\r\n}\r\n\r\ntype promoCodeActionType = {\r\n    type: typeof ADD_PROMO_CODE\r\n    payload: string\r\n}\r\n\r\ntype checkPromoCodeType = {\r\n    type: typeof CHECK_PROMO_CODE\r\n}\r\n\r\nexport type ActionsType = addToCartActionType |\r\n    removeFromCartActionType |\r\n    toggleTheCartActionType |\r\n    addToShoppingListActionType |\r\n    booksActionType |\r\n    setFilterActionType |\r\n    setSearchQueryActionType |\r\n    promoCodeActionType |\r\n    checkPromoCodeType","import {ActionsType, SET_FILTER, SET_QUERY} from \"../types/types\";\r\n\r\nexport const setFilter = (filter: string): ActionsType => ({\r\n    type: SET_FILTER,\r\n    payload: filter,\r\n});\r\n\r\nexport const setSearchQuery = (value: string): ActionsType => ({\r\n    type: SET_QUERY,\r\n    payload: value,\r\n});\r\n\r\nexport type filterActionsType = {\r\n    setFilter: typeof setFilter\r\n    setSearchQuery: typeof setSearchQuery\r\n}","import React from 'react'\r\nimport {Input, Menu} from 'semantic-ui-react'\r\nimport {ActionsType} from \"../../types/types\";\r\n\r\ntype FilterTypes = {\r\n    filterBy: string\r\n    searchQuery: string\r\n    setSearchQuery: (filter: string) => ActionsType\r\n    setFilter: (value: string) => ActionsType\r\n\r\n}\r\n\r\nconst Filter: React.FC<FilterTypes> = ({setFilter, filterBy, searchQuery, setSearchQuery}) => {\r\n\r\n    return (\r\n        <Menu secondary>\r\n            <Menu.Item\r\n                active={filterBy === 'all'}\r\n                onClick={() => setFilter('all')}\r\n            >Все</Menu.Item>\r\n            <Menu.Item\r\n                active={filterBy === 'price_high'}\r\n                onClick={() => setFilter('price_high')}\r\n            >Цена(дорогие)</Menu.Item>\r\n            <Menu.Item\r\n                active={filterBy === 'price_low'}\r\n                onClick={() => setFilter('price_low')}\r\n            >Цена(дешевые)</Menu.Item>\r\n            <Menu.Item\r\n                active={filterBy === 'author'}\r\n                onClick={() => setFilter('author')}\r\n            >Автор</Menu.Item>\r\n            <Menu.Item>\r\n                <Input\r\n                    icon='search'\r\n                    onChange={e => setSearchQuery(e.target.value)}\r\n                    value={searchQuery}\r\n                    placeholder='Введите запрос..'/>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n}\r\nexport default Filter;","import {connect} from 'react-redux';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\n\r\nimport * as filterActions from '../actions/filter';\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport {filterActionsType} from \"../actions/filter\";\r\n\r\nconst mapStateToProps = ({filter: {filterBy, searchQuery}}: { filter: { filterBy: string, searchQuery: string } }) => ({\r\n    filterBy: filterBy,\r\n    searchQuery: searchQuery,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): filterActionsType => ({\r\n    ...bindActionCreators(filterActions, dispatch),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import {booksType} from \"../types/booksType\";\r\nimport {ActionsType, ADD_TO_CART, ADD_TO_SHOPPING_LIST, REMOVE_FROM_CART, TOGGLE_THE_CART,} from \"../types/types\";\r\n\r\nexport const addToCart= (obj:booksType): ActionsType  => ({\r\n    type: ADD_TO_CART,\r\n    payload: obj,\r\n});\r\n\r\nexport const removeFromCart= (id: number): ActionsType => ({\r\n    type: REMOVE_FROM_CART,\r\n    payload: id\r\n});\r\n\r\nexport const isCartOpened = (): ActionsType => ({\r\n    type: TOGGLE_THE_CART,\r\n});\r\n\r\nexport const addToShoppingList= (): ActionsType => ({\r\n    type: ADD_TO_SHOPPING_LIST,\r\n});\r\n\r\nexport type cartActionsType ={\r\n    addToCart: typeof addToCart\r\n    removeFromCart: typeof removeFromCart\r\n    isCartOpened: typeof isCartOpened\r\n    addToShoppingList: typeof addToShoppingList\r\n}","import {ActionsType, ADD_PROMO_CODE, CHECK_PROMO_CODE} from \"../types/types\";\r\n\r\nexport const promoCode = (promoCodeValue: string): ActionsType => ({\r\n    type: ADD_PROMO_CODE,\r\n    payload: promoCodeValue,\r\n});\r\n\r\n\r\nexport const checkPromoCode = ():ActionsType  => ({\r\n    type: CHECK_PROMO_CODE,\r\n})\r\nexport type promoCodeActionsType = {\r\n     promoCode: typeof promoCode\r\n     checkPromoCode: typeof checkPromoCode\r\n }","import React from 'react'\r\nimport {Header, Image, Icon, Modal} from 'semantic-ui-react'\r\n\r\nimport './CartInner.css'\r\nimport {booksType} from \"../../../types/booksType\";\r\nimport {ActionsType} from \"../../../types/types\";\r\n\r\ntype CartInnerType = {\r\n    item: booksType\r\n    addToCart: (obj: booksType) => ActionsType\r\n    removeFromCart: (id: number) => ActionsType\r\n    booksInCartIds: number[]\r\n}\r\nconst CartInner: React.FC<CartInnerType> = ({\r\n                                                item,\r\n                                                addToCart,\r\n                                                removeFromCart,\r\n                                                booksInCartIds\r\n                                            }) => {\r\n\r\n    const booksCount = booksInCartIds.reduce((init, current) => init + (current === item.id ? 1 : 0), 0);\r\n\r\n    return (\r\n        <Modal.Content image>\r\n            <Image\r\n                wrapped\r\n                size='small'\r\n                src={item.image}\r\n            />\r\n            <Modal.Description>\r\n                <Header>{item.title}</Header>\r\n                <p>\r\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium aut, consequatur dignissimos\r\n                    dolor dolore dolorum fugiat labore minus nulla optio placeat qui quos ratione, reiciendis saepe\r\n                    sequi unde vel voluptatibus.\r\n                </p>\r\n                <p><b>{item.author}</b></p>\r\n\r\n                <div className=\"book__count\">\r\n                    Количество книг : {booksCount}\r\n                </div>\r\n\r\n                <div className=\"book__count\">\r\n                    Стоимость одной книги : {item.price} <Icon name='rub'/>\r\n                </div>\r\n\r\n                <div className=\"book__count\">\r\n                    Итого : {item.price * booksCount} <Icon name='rub'/>\r\n                </div>\r\n\r\n                <div className=\"cart__actions\">\r\n                    <button className=\"add__book\" onClick={() => addToCart(item)}>+</button>\r\n                    <button className=\"minus__book\" onClick={() => removeFromCart(item.id)}>-</button>\r\n                </div>\r\n            </Modal.Description>\r\n\r\n        </Modal.Content>\r\n    )\r\n};\r\n\r\nexport default CartInner","import {connect} from 'react-redux';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\n\r\nimport * as cartActions from '../actions/cart';\r\nimport CartInner from \"../components/CartModule/CartInner/CartInner\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport {cartActionsType} from \"../actions/cart\";\r\n\r\ntype mapStateToPropsType = {\r\n    cart: { booksInCartIds: number[] }\r\n}\r\n\r\nconst mapStateToProps = ({cart: {booksInCartIds}}: mapStateToPropsType) => ({\r\n    booksInCartIds: booksInCartIds\r\n\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): cartActionsType => ({\r\n    ...bindActionCreators(cartActions, dispatch)\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartInner);\r\n","import React from 'react';\r\nimport {Button, Icon, Modal} from 'semantic-ui-react';\r\n\r\nimport CartInner from '../../containers/cartInner';\r\nimport \"./CartModule.css\";\r\nimport {booksType} from \"../../types/booksType\";\r\nimport {ActionsType} from \"../../types/types\";\r\n\r\ntype CartModuleType = {\r\n    CartItems: booksType[]\r\n    totalPrice: number\r\n    addToShoppingList: () => ActionsType\r\n    promoCode: (promoCodeValue: string) => ActionsType,\r\n    checkPromoCode: () => ActionsType\r\n    isbuttonDisabled: boolean,\r\n    count: number\r\n}\r\nconst CartModule: React.FC<CartModuleType> = ({\r\n                                                  CartItems,\r\n                                                  totalPrice,\r\n                                                  addToShoppingList,\r\n                                                  promoCode,\r\n                                                  checkPromoCode,\r\n                                                  isbuttonDisabled,\r\n                                                  count\r\n                                              }) => {\r\n    return (\r\n        <Modal trigger={<Button>\r\n            <Icon name='shop'/>\r\n            Корзина (<b>{count}</b>)\r\n        </Button>}>\r\n\r\n            <Modal.Header>Ваша корзина</Modal.Header>\r\n            {CartItems.map(item => <CartInner key={item.id + 10} item={item}/>)}\r\n            <hr/>\r\n\r\n            <div className=\"cart__module__container\">\r\n                <div className='cart__total'>\r\n                    <div className=\"cart__total__title\">Итого :</div>\r\n                    <div className=\"cart__total__value\">{totalPrice} <Icon name='rub'/></div>\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n                <div className=\"get__shopping__list\">\r\n                    <Button onClick={addToShoppingList}>Купить</Button>\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n                <div className=\"cart_promo__code\">\r\n                    <div>\r\n                        <input className='promo__input' onChange={(e) => promoCode(e.target.value)} type=\"text\"\r\n                               placeholder='Введите промокод'/>\r\n                        <Button className='promo__button' onClick={checkPromoCode}\r\n                                disabled={!isbuttonDisabled}>Применить</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n};\r\n\r\n\r\nexport default CartModule\r\n","import {connect} from 'react-redux';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\n\r\nimport * as cartActions from '../actions/cart';\r\nimport * as promocodeActions from '../actions/promocodeAction';\r\nimport CartModule from \"../components/CartModule/CartModule\";\r\nimport uniqBy from 'lodash/uniqBy';\r\nimport {booksType} from \"../types/booksType\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport {promoCodeActionsType} from \"../actions/promocodeAction\";\r\nimport {cartActionsType} from \"../actions/cart\";\r\n\r\ntype mapStateToPropsType = {\r\n    cart: { booksInCart: booksType[], promoCode: string, isbuttonDisabled: boolean }\r\n}\r\n\r\nconst mapStateToProps = ({cart: {booksInCart, promoCode, isbuttonDisabled}}: mapStateToPropsType) => ({\r\n    CartItems: uniqBy(booksInCart, item => item.id),\r\n    totalPrice: booksInCart.reduce((total, book) => total + book.price, 0),\r\n    CheckPromoCode: promoCode,\r\n    isbuttonDisabled: isbuttonDisabled\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): promoCodeActionsType & cartActionsType => ({\r\n    ...bindActionCreators(cartActions, dispatch),\r\n    ...bindActionCreators(promocodeActions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartModule);\r\n","import React from 'react'\r\nimport {Button, Icon, Image, Modal} from 'semantic-ui-react'\r\n\r\nimport './ShoppingList.css'\r\nimport {booksType} from \"../../types/booksType\";\r\n\r\ntype shoppingListInner = {\r\n    title: string\r\n    author: string\r\n    image: string\r\n}\r\n\r\nconst shoppingListInner = ({title, author, image}: shoppingListInner) => {\r\n    return (\r\n        <div key={Math.random() + 1} className='shopping__list__order__item '>\r\n            <Modal.Content image>\r\n                <Image\r\n                    wrapped\r\n                    size='small'\r\n                    src={image}\r\n                />\r\n                <Icon name='checkmark'/> {title} - {author}\r\n            </Modal.Content>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst shoppingLisOuter = (item: booksType[], index: number) => {\r\n    console.log(item)\r\n    return (\r\n        <div key={Math.random() + 2} className='shopping__list_each__order'>\r\n            <div className='shopping__list__title'>\r\n                <b>Заказ №: &nbsp; </b>\r\n                {++index}\r\n            </div>\r\n            <div className='shopping__list__order__items'>\r\n                {item.map(itemInner => shoppingListInner(itemInner))}\r\n            </div>\r\n            <div className='shopping__list__total'>\r\n                <b>Итого</b>:&nbsp; {item.reduce((total, book) => total + book.price, 0)} <Icon name='rub'/>\r\n            </div>\r\n            <hr/>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst shoppingList: React.FC<{ shoppingList: booksType[][] }> = ({shoppingList}) => {\r\n\r\n    return (\r\n        <Modal trigger={<Button>\r\n            <Icon name='th list'/>\r\n            Список покупок\r\n        </Button>}>\r\n\r\n            <Modal.Header>Ваши покупки:</Modal.Header>\r\n            {shoppingList.map((item, index) => shoppingLisOuter(item, index))}\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default shoppingList\r\n","import {connect} from 'react-redux';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\n\r\nimport * as cartActions from \"../actions/cart\";\r\nimport shoppingList from '../components/ShoppingList/ShoppingList'\r\nimport {booksType} from \"../types/booksType\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport {cartActionsType} from \"../actions/cart\";\r\n\r\ntype mapStateToPropsType = {\r\n    cart: { shoppingList: booksType[][] }\r\n}\r\nconst mapStateToProps = ({cart: {shoppingList}}: mapStateToPropsType) => ({\r\n    shoppingList: shoppingList,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): cartActionsType => ({\r\n    ...bindActionCreators(cartActions, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(shoppingList);\r\n\r\n","import {connect} from 'react-redux';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport * as cartActions from '../actions/cart';\r\nimport {booksType} from \"../types/booksType\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport {ShopMenu} from \"../components/ShopMenu/ShopMenu\";\r\nimport {cartActionsType} from \"../actions/cart\";\r\n\r\ntype mapStateToPropsType = {\r\n    cart: { booksInCart: booksType[] }\r\n}\r\n\r\nconst mapStateToProps = ({cart: {booksInCart}}: mapStateToPropsType) => ({\r\n    totalPrice: booksInCart.reduce((total, book) => total + book.price, 0),\r\n    count: booksInCart.length,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): cartActionsType => ({\r\n    ...bindActionCreators(cartActions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopMenu);\r\n","import React from 'react';\r\nimport {Menu} from 'semantic-ui-react';\r\n\r\nimport CartModule from \"../../containers/CartModule\";\r\nimport ShoppingList from \"../../containers/ShoppingList\";\r\n\r\ntype shopMenuPropsType = {\r\n    totalPrice: number\r\n    count: number\r\n}\r\n\r\nexport const ShopMenu: React.FC<shopMenuPropsType> = ({totalPrice, count}) => {\r\n\r\n    return (\r\n        <Menu>\r\n            <Menu.Item\r\n                name='browse'\r\n            >\r\n                Магазин книг\r\n            </Menu.Item>\r\n\r\n            <Menu.Menu position='right'>\r\n\r\n                <Menu.Item>\r\n                    <ShoppingList/>\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                    name='signup'\r\n                >\r\n                    Итого: &nbsp; <b>{totalPrice}</b> &nbsp; руб.\r\n                </Menu.Item>\r\n\r\n                <Menu.Item>\r\n                    <CartModule count={count}/>\r\n                </Menu.Item>\r\n\r\n            </Menu.Menu>\r\n        </Menu>\r\n    )\r\n};\r\n","import React from 'react'\r\nimport {Card, Icon, Image, Button} from 'semantic-ui-react'\r\n\r\nimport {booksType} from \"../../types/booksType\";\r\nimport {ActionsType} from \"../../types/types\";\r\nimport \"./BookCard.css\"\r\n\r\ntype BookCardType = {\r\n    addToCart: (obj: booksType) => ActionsType\r\n    addedCount: number\r\n    book: booksType\r\n\r\n}\r\n\r\nconst BookCard: React.FC<BookCardType> = ({book, addToCart, addedCount}) => {\r\n    const {title, author, price, image} = book\r\n\r\n    return (\r\n        <Card>\r\n            <Image src={image}/>\r\n            <Card.Content>\r\n                <Card.Header>{title}</Card.Header>\r\n                <Card.Meta>\r\n                <span className='book__card__date'>\r\n                    {author}\r\n                </span>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <span className=\"book__card__rub\">\r\n                    <Icon name='rub'/>\r\n                    {price}\r\n                </span>\r\n            </Card.Content>\r\n            <Button onClick={() => addToCart(book)}>Добавить в корзину {addedCount > 0 && `(${addedCount})`}</Button>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default BookCard;","import {connect} from 'react-redux';\r\nimport { bindActionCreators, Dispatch} from \"redux\";\r\n\r\nimport * as cartActions from '../actions/cart';\r\nimport BookCard from \"../components/BookCard/BookCard\";\r\nimport {initialStateType} from \"../reducers/cart\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport {cartActionsType} from \"../actions/cart\";\r\n\r\ntype StateType = {\r\n    cart: initialStateType\r\n}\r\ntype ownPropsType = {\r\n    id: number\r\n}\r\n\r\nconst mapStateToProps = ({cart}: StateType, {id}: ownPropsType) => ({\r\n    addedCount: cart.booksInCart.reduce((count, book) => count + (book.id === id ? 1 : 0), 0)\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): cartActionsType => ({\r\n    ...bindActionCreators(cartActions, dispatch),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookCard);\r\n","import {connect} from 'react-redux';\r\nimport orderBy from 'lodash/orderBy';\r\n\r\nimport {booksType} from \"../types/booksType\";\r\nimport {Main} from \"../components/Main/Main\";\r\n\r\n\r\ntype sortByType = (books: booksType[], filterBy: string) => booksType[]\r\nconst sortBy: sortByType = (books, filterBy) => {\r\n\r\n    switch (filterBy) {\r\n        case 'all':\r\n            return books;\r\n\r\n        case 'price_high':\r\n            return orderBy(books, 'price', 'desc');\r\n\r\n        case 'price_low':\r\n            return orderBy(books, 'price', 'asc');\r\n\r\n        case 'author':\r\n            return orderBy(books, 'author', 'asc');\r\n\r\n        default:\r\n            return books;\r\n\r\n    }\r\n\r\n};\r\n\r\ntype filterBooks = (books: booksType[], searchQuery: string) => booksType[]\r\nconst filterBooks: filterBooks = (books, searchQuery) =>\r\n    books.filter(\r\n        item =>\r\n            item.title.toLowerCase().indexOf(searchQuery.toLowerCase()) >= 0 ||\r\n            item.author.toLowerCase().indexOf(searchQuery.toLowerCase()) >= 0\r\n    );\r\ntype searchBooksType = (books: booksType[], filterBy: string, searchQuery: string) => booksType[]\r\n\r\nconst searchBooks: searchBooksType = (books, filterBy, searchQuery) => {\r\n    return sortBy(filterBooks(books, searchQuery), filterBy);\r\n};\r\n\r\ntype mapStateToPropsType = {\r\n    books: { books: booksType[], isReady: boolean }\r\n    filter: { filterBy: string, searchQuery: string }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({books: {books, isReady}, filter: {filterBy, searchQuery}}: mapStateToPropsType) => ({\r\n    books: books && searchBooks(books, filterBy, searchQuery),\r\n    isReady,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(Main);","import React from 'react';\r\nimport {Card} from \"semantic-ui-react\";\r\nimport BookCard from \"../../containers/BookCard\";\r\nimport {booksType} from \"../../types/booksType\";\r\n\r\ninterface Props {\r\n    books: booksType[]\r\n    isReady: boolean\r\n}\r\n\r\nexport const Main: React.FC<Props> = ({books, isReady}) => {\r\n    return (\r\n        <div>\r\n            <Card.Group itemsPerRow={4}>\r\n                {!isReady ? 'Загрузка..' : books.map((item, index) => (\r\n                    <BookCard key={index} id={item.id} book={item}/>))}\r\n            </Card.Group>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport { Container} from 'semantic-ui-react'\r\n\r\nimport Filter from \"../../containers/Filter\";\r\nimport ShopMenu from \"../../containers/ShopMenu\";\r\nimport Main from '../../containers/Main'\r\nimport './App.css';\r\n\r\n\r\ntype appPropsType = {\r\n    getBookThunk: () => void\r\n}\r\n\r\nconst App: React.FC<appPropsType> = ({ getBookThunk}) => {\r\n\r\n    useEffect(() => {\r\n        getBookThunk()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <ShopMenu />\r\n            <Filter />\r\n            <Main/>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default App;\r\n","import {connect} from 'react-redux';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\n\r\nimport * as booksActions from '../actions/books';\r\nimport App from '../components/App/App';\r\nimport {ActionsType} from \"../types/types\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>) => ({\r\n    ...bindActionCreators(booksActions, dispatch),\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","import {ActionsType} from \"../types/types\";\r\nimport {booksType} from \"../types/booksType\";\r\nimport produce, {Draft} from \"immer\"\r\n\r\ntype initialStateType = {\r\n    isReady: boolean,\r\n    books: booksType[],\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    isReady: false,\r\n    books: [] as booksType[],\r\n};\r\n\r\nexport default (state: initialStateType = initialState, action: ActionsType): initialStateType =>\r\n    produce(state, (draft: Draft<initialStateType>) => {\r\n            switch (action.type) {\r\n                case 'SET_BOOKS':\r\n                    draft.books = action.payload\r\n                    draft.isReady = true\r\n                    break;\r\n            }\r\n        }\r\n    )\r\n","import {booksType} from \"../types/booksType\";\r\nimport {ActionsType} from \"../types/types\";\r\nimport produce, {Draft} from \"immer\"\r\n\r\nexport type initialStateType = {\r\n    booksInCart: booksType[],\r\n    booksInCartIds: number[],\r\n    shoppingList: booksType[][],\r\n    isbuttonDisabled: boolean,\r\n    promoCode: string\r\n}\r\nconst initialState: initialStateType = {\r\n    booksInCart: [],\r\n    booksInCartIds: [],\r\n    shoppingList: [],\r\n    isbuttonDisabled: true,\r\n    promoCode: ''\r\n};\r\n\r\nexport default (state: initialStateType = initialState, action: ActionsType): initialStateType =>\r\n    produce(state, (draft: Draft<initialStateType>) => {\r\n        switch (action.type) {\r\n\r\n            case 'ADD_TO_CART':\r\n                draft.booksInCart.push(action.payload)\r\n                draft.booksInCartIds.push(action.payload.id)\r\n                break;\r\n\r\n            case 'REMOVE_FROM_CART':\r\n                draft.booksInCart.splice(draft.booksInCart.findIndex(book => book.id === action.payload), 1);\r\n                // // Находим в корзине по индексу нужный элемент --> вырезаем с помощью splice\r\n                draft.booksInCartIds.splice(draft.booksInCartIds.indexOf(action.payload), 1)\r\n                // // Так же удаляем из массива с индексами этот элемент\r\n                break;\r\n\r\n            case 'ADD_TO_SHOPPING_LIST':\r\n                draft.shoppingList.push(draft.booksInCart)\r\n                draft.booksInCart = []\r\n                draft.booksInCartIds = []\r\n                draft.isbuttonDisabled = true\r\n                break;\r\n\r\n            case 'ADD_PROMO_CODE':\r\n                draft.promoCode = action.payload\r\n                break;\r\n\r\n            case 'CHECK_PROMO_CODE':\r\n                if (draft.promoCode === 'DISCOUNT') {\r\n                    draft.booksInCart = draft.booksInCart.map(item => ({...item, price: item.price * 0.5}));\r\n                    draft.isbuttonDisabled = draft.isbuttonDisabled = false;\r\n                }\r\n                break;\r\n        }\r\n    })\r\n\r\n","import {ActionsType} from \"../types/types\";\r\nimport produce, {Draft} from \"immer\"\r\n\r\n\r\ntype initialStateType = {\r\n    searchQuery: string,\r\n    filterBy: string\r\n}\r\nconst initialState: initialStateType = {\r\n    searchQuery: '',\r\n    filterBy: 'all',\r\n};\r\n\r\nexport default (state: initialStateType = initialState, action: ActionsType) =>\r\n    produce(state, (draft: Draft<initialStateType>) => {\r\n\r\n        switch (action.type) {\r\n            case 'SET_QUERY':\r\n                draft.searchQuery = action.payload\r\n                break;\r\n\r\n            case 'SET_FILTER':\r\n                draft.filterBy = action.payload\r\n                break;\r\n\r\n        }\r\n    });\r\n","import {combineReducers} from \"redux\";\r\n\r\nimport books from './books';\r\nimport cart from './cart';\r\nimport filter from './filter';\r\n\r\nexport const rootReducer =  combineReducers({\r\n    books,\r\n    cart,\r\n    filter,\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport App from './containers/App';\r\nimport createStore from './store';\r\n\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport {rootReducer} from \"./reducers/rootReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nexport default () => {\r\n    const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n    return store;\r\n};\r\n"],"sourceRoot":""}